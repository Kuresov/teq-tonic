///
/// Create consistent context selectors
/// @name context
/// @group shadow-dom
/// @param {map} $selectors [()] - Input a list of selectors.
/// @param {list} $modifiers [null] - Searches modifiers
/// @example scss
///   @include context(class("alert"), is "focus") {
///     property: value;
///   }
///
///   // output
///   .sample-alert.is-focus .child-element
/// @require {function} has-selector
/// @require {function} get-setup
/// @require {function} strip-selector
/// @require {mixin} toggle
/// @require {variable} $_namespace-mod
///

@mixin context($selectors: (), $modifiers: null) {
	// toggle
	@if not get-setup("context") {
		@include toggle((
			"context": true));
	}

	// create context selector
	$context-selector: "";
	@each $selector in $selectors {
		$i: index($selectors, $selector);

		@if get-setup("host") {
			$context-selector: $context-selector + ".context-" + strip-selector($selector);
		} @else {
			$context-selector: $context-selector + has-selector($selector);
		}
	};



	// create mod name
	$mod-selector: "";
	@each $modifier in $modifiers {
		$i: index($modifiers, $modifier);

		@if $i and $i + 1 <= length($modifiers) {
			$key: nth($modifiers, $i);
			$value: nth($modifiers, $i + 1);

			@if $key == "child" { $mod-selector: $mod-selector + map-get($_setup-prefixes, "child-prefix") + $value; }
			@if $key == "mod" { $mod-selector: $mod-selector + map-get($_namespace-mod, "mod") + "-" + $value; }
			@if $key == "is" { $mod-selector: $mod-selector + map-get($_namespace-mod, "is") + "-" + $value; }
			@if $key == "has" { $mod-selector: $mod-selector + map-get($_namespace-mod, "has") + "-" + $value; }
		}
	}

	@if get-setup("host") {
		$child-selector: "";
		@if get-setup("child") {
			$child-selector: get-setup("default-selector");
		}

		@at-root :host(#{$context-selector}#{$mod-selector}) #{$child-selector} {
			@content;
		}
	} @else {
		#{$context-selector}#{$mod-selector} & {
			@content;
		}
	}

	// toggle
	@include toggle((
		"context": false));
}
