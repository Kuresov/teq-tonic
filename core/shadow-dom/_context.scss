///
/// Create consistent context selectors
/// @name context
/// @group shadow-dom
/// @param {map} $selectors [()] - Input a list of selectors.
/// @example scss
///   @include context(class("alert"), is "focus") {
///     property: value;
///   }
///
///   // output
///   .sample-alert.is-focus .child-element
/// @require {function} get-setup
/// @require {mixin} toggle
/// @require {variable} $_namespace-mod
///

@mixin context($selectors: (), $modifiers: null) {
	// create context selector
	$context-selector: "";
	@each $selector in $selectors {
		$i: index($selectors, $selector);

		@if get-setup("host") {
			$context-selector: $context-selector + ".context-" + strip-selector($selector);
		} @else {
			$context-selector: $context-selector + has-selector($selector);
		}
	};

	// create mod name
	$mod-selector: "";
	@each $modifier in $modifiers {
		$i: index($modifiers, $modifier);

		@if $i and $i + 1 <= length($modifiers) {
			$key: nth($modifiers, $i);
			$value: nth($modifiers, $i + 1);

			@if $key == "mod" { $mod-selector: map-get($_namespace-mod, "mod") + "-" + $value; }
			@if $key == "is" { $mod-selector: map-get($_namespace-mod, "is") + "-" + $value; }
			@if $key == "has" { $mod-selector: map-get($_namespace-mod, "has") + "-" + $value; }
		}
	}

	@if get-setup("host") {
		@at-root :host(#{$context-selector}#{$mod-selector}) {
			@content;
		}
	} @else {
		#{$context-selector}#{$mod-selector} & {
			@content;
		}
	}
}

@function strip-selector($selector) {
	@if not type-of($selector) == "string" {
		@return null;
	}

	$prefix: str-slice($selector, 0, 1);

	@if $prefix == "." or $prefix == "#" {
		@return str-slice($selector, 2, str-length($selector));
	}

	@return $selector;
}

@function has-selector($selector) {
	@if map-get($_namespace-component, $selector) {
		@return map-get($_namespace-component, $selector);
	}

	@return $selector;
}
