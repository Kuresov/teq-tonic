

@mixin host-context($context: null, $component: null, $modifiers: null, $options: ()) {
	@if not $context { @error "Host context selector(s) needs to be passed in!"; }
	@if not $component { @error "Component selector needs to be passed in!"; }

	$needs-context: false;
	@each $arg in $_settings-context {
		@if nth($context, 1) == $arg or "all" == $arg { $needs-context: true; }
	}

	@if $needs-context {
		$host-options: ("prefix-append": get-setup("child-prefix"), "prefix-modifier": get-setup("modifier-prefix"), "shadow-root": false, "compile-class": false, "remove-host": false, "custom-selector": null);
		$host-options: map-merge($host-options, $options);

		// Build context selector
		$context-selector: build-context-selector($context, $component, $modifiers, $host-options);

		// Build component selector
		$component-selector: build-component-selector($component, $host-options);

		// Build host context selector
		$host-context-selector: build-context-selector($context, $component, $modifiers, $host-options, $host: true);

		// Default Selector
		#{$context-selector} #{$component-selector} { @content; }

		// Host Selector
		@if map-get($host-options, "shadow-root") {
			@if map-get($host-options, "remove-host") { #{$host-context-selector} { @content; } }
			:host(#{$host-context-selector}) { @content; }
		} @else {
			:host(#{$host-context-selector}) #{$component-selector} { @content; }
		}
	}
}



@function build-component-selector($component: null, $args: null, $host: false) {
	$component-selector: "";
	$component-prefix: get-setup("prefix");

	@if map-get($args, "shadow-root") and $host {
		@if map-get($args, "custom-selector") {
			$component-selector: $component-prefix + map-get($args, "custom-selector");
		} @else {
			$component-selector: $component-prefix + $component;
		}
	} @else {
		@if map-get($args, "compile-class") { $component: class($component); }
		@each $selector in $component { $component-selector: $component-selector + $selector; }
		$component-select: selector-append($component-selector);
	}

	@return $component-selector;
}



@function build-context-selector($context: null, $component: null, $modifier: null, $args: null, $host: false) {
	$selectors: ();
	$prefix-type-append: map-get($args, "prefix-append");
	$prefix-type-modifier: map-get($args, "prefix-modifier");

	@if $host {
		@each $selector in $context { $selectors: append($selectors, unquote($selector)); }
		$selectors: append-modifiers($context, $component, $selectors, $modifier, $args, "append", $prefix-type-append, $host);
		$selectors: append-modifiers($context, $component, $selectors, $modifier, $args, "modifier", $prefix-type-modifier, $host);
	} @else {
		@each $selector in $context { $selectors: append($selectors, class($selector)); }
		$selectors: append-modifiers($context, $component, $selectors, $modifier, $args, "append", $prefix-type-append);
		$selectors: append-modifiers($context, $component, $selectors, $modifier, $args, "modifier", $prefix-type-modifier);
		$selectors: selector-nest(#{$selectors});
	}

	@return $selectors;
}



@function append-modifiers($context: null, $component: null, $selectors: null, $modifier: null, $args: null, $modifier-type: null, $prefix: null, $host: false) {
	$output-selector: "";
	$mod-append: ($modifier-type);
	@for $i from 2 through 10 { $mod-append: append($mod-append, $modifier-type + $i); }

	@each $mod in $mod-append {
		$i: index($modifier, $mod);
		$j: index($mod-append, $mod);
		@if $i and $i + 1 <= length($modifier) {
			@if $j <= length($selectors) {
				@if $host and $modifier-type == "modifier" {
					$selectors: $selectors + ".context-modifier-" + nth($modifier, $i + 1);
				} @else {
					$appended: nth($selectors, $j) + $prefix + nth($modifier, $i + 1);
					$selectors: set-nth($selectors, $j, $appended);
				}
			} @else {
				@warn "Please select the correct selector! '#{nth($modifier, $i + 1)}' will not append to anything.";
			}
		}
	}

	@if $host {
		$output-selector: clean-context-selector($context, $component, $selectors, $args, $modifier-type);
	} @else {
		$output-selector: $selectors;
	}

	@return $output-selector;
}



@function clean-context-selector($context: null, $component: null, $selectors: null, $args: null, $modifier-type: null) {
	$context-selector: "";

	@if $modifier-type == "append" {
		@each $selector in $selectors { $context-selector: $context-selector + ".context-" + $selector; }
	} @else {
		$host-selector: "";
		@if map-get($args, "shadow-root") { $host-selector: build-component-selector($component, $args, $host: true); }
		$context-selector: $host-selector + $selectors;
	}

	@return $context-selector;
}
