///
/// Gets the rgba values from a hex value in a map of colors.
/// @name rgba-map
/// @group support
/// @access private
/// @param {map} $colors [null] - A palette of colors.
/// @example scss
///   $colors-rgba: rgba-map($palette);
///

@function rgba-map($colors: null) {
	$color-map: ();

	@each $color in $colors {
		$color-name: nth($color, 1);
		$color-rgb: #{red(nth($color, 2)), green(nth($color, 2)), blue(nth($color, 2))};
		$color-map: map-merge($color-map, ($color-name: $color-rgb));
	}

	@return $color-map;
}

///
/// Color function that calls to the `$_palette-default` map by default.
/// @name color
/// @group property
/// @param {string} $color [null] - Choose a color from a color palette.
/// @param {number} $opacity [1] - Change the opacity of the color.
/// @param {map} $palette [$_palette-default] - Change which palette the color call is to.
/// @param {boolean} $css-variables [true] - Choose if it's a css variable or rgba value.
/// @example scss
///   background: color("green-50");
///   color: color("gray-600", 0.8);
///
///   // output
///   background: rgba(var(--color-green-50), 1);
///   color: rgba(var(--color-gray-600), 0.8);
/// @require {variable} $_palette-default
///

@function color($colors: null, $opacity: 1, $palette: $_palette-default, $css-variables: true) {
	// WCAG contrast check
	@if length($colors) > 1 {
		$color-luminance: luminance(get-hex(nth($colors, 1), $palette));
		$contrast-luminance: luminance(get-hex(nth($colors, 2), $palette));
		$wcag: wcag($color-luminance, $contrast-luminance);

		// WCAG 2
		@if $wcag < 4.5 {
			@warn "WCAG AA: Failed. Your current ratio is #{$wcag} and needs to be 4.5 or higher.";
		}

		// WCAG 3
		@if $wcag < 7.1 {
			@warn "WCAG AAA: Failed.";
		}
	}

	@if map-has-key($palette, nth($colors, 1)) and $css-variables {
		@return #{rgba(unquote("var(--color-" + nth($colors, 1) + ")"), $opacity)};
	} @else if map-has-key($palette, nth($colors, 1)) {
		@return #{rgba(map-get($palette, nth($colors, 1)), $opacity)};
	} @else {
		@return #{rgba(nth($colors, 1), $opacity)};
	}
}

///
/// Shadow function that calls to the `$_palette-default` map by default.
///
/// _This is a Safari `box-shadow` fix. Safari currently does not support css variables being used for the `box-shadow` property._
/// @name shadow
/// @group property
/// @param {string} $color [null] - Choose a color from a color palette.
/// @param {number} $opacity [1] - Change the opacity of the color.
/// @param {map} $palette [$_palette-default] - Change which palette the color call is to.
/// @example scss
///   box-shadow: shadow("charcoal-500") 0.1rem 0.1rem 0.5rem;
///
///   // output
///   box-shadow: rgba(41, 62, 64, 1) 0.1rem 0.1rem 0.5rem;
/// @require {variable} $_palette-default
///

@function shadow($color: null, $opacity: 1, $palette: $_palette-default) {
	@if not map-has-key($palette, $color) {
		@warn "No color found for '#{$color}'. Property omitted.";
		@return null;
	}

	@return #{rgba(map-get($_palette-default, $color), $opacity)}
}
